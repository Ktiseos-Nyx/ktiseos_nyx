{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"api_1_param_formatted_docstring_template": {
		"scope": "python",
		"prefix": "API 1 Parameter Docstring",
		"body": [
			"\"\"\"",
			"${1:description}\\n",
			":param ${2:variable}: ${3:description}",
			":type ${2:variable}: ${4:type}",
			":return: ${5:output}",
			"\"\"\""
		],
		"description": "Add sphinx docstring for a function/method that accepts a single parameter"
	},
	"api_2_param_formatted_docstring_template": {
		"scope": "python",
		"prefix": "API 2 Parameter Docstring",
		"body": [
			"\"\"\"",
			"${1:description}\\n",
			":param ${2:variable}: ${3:description}",
			":type ${2:variable}: ${4:type}",
			":param ${5:variable}: ${6:description}",
			":type ${5:variable}: ${7:type}",
			":return: ${8:output}",
			"\"\"\""
		],
		"description": "Add sphinx docstring for a function/method that accepts two parameters"
	},
	"api_3_param_formatted_docstring_template": {
		"scope": "python",
		"prefix": "API 3 Parameter Docstring",
		"body": [
			"\"\"\"",
			"${1:description}\\n",
			":param ${2:variable}: ${3:description}",
			":type ${2:variable}: ${4:type}",
			":param ${5:variable}: ${6:description}",
			":type ${5:variable}: ${7:type}",
			":param ${8:variable}: ${9:description}",
			":type ${8:variable}: ${10:description}",
			":return: ${11:output}",
			"\"\"\""
		],
		"description": "Add sphinx docstring for a function/method that accepts three parameters"
	},
	"logger_debug_variable": {
		"scope": "python",
		"prefix": "API Logger Variable Debug",
		"body": [
			"logger.debug('${1:variable}:: %s', f'{type(${1:variable})} {${1:variable}}')"
		],
		"description": "Add a debug statement for a specific variable"
	},
	"try_except_log_block": {
		"scope": "python",
		"prefix": "API Try/Except Full",
		"body": [
			"try:",
			"    ${1:hazardous_code}",
			"except ${2:exception_type} as error_log:",
			"    logger.info('${3:error_message} %s', f'${4:variables/code} , {error_log}', exc_info=EXC_INFO)"
		],
		"description": "Add a try/except catch statement with logger info"
	},
	"try_except_log_info": {
		"scope": "python",
		"prefix": "API Logger Except Info Only",
		"body": [
			"    logger.info('${1:error_message} %s', f'{${2:variables/code}}, {error_log}', exc_info=EXC_INFO)"
		],
		"description": "Add info formatted for a try/except statement"
	},
	"raise_exception_info": {
		"scope": "python",
		"prefix": "API Exception Info",
		"body": [
			"raise ${1:exception}('${2:error_message} %s', ${3:variables/code})"
		],
		"description": "Add error message for a specific exception"
	},
	"api_class_docstring_template": {
		"scope": "python",
		"prefix": "API Class Docstring",
		"body": [
			"\"\"\"",
			"${1:description}\\n",
			":param ${2:variable}: ${3:description}",
			":type ${2:variable}: ${4:type}",
			"\"\"\""
		],
		"description": "Add sphinx docstring for a class (no :return: field)"
	},
}